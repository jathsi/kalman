/**
 * Test for the KalmanFilter class with 1D projectile motion.
 *
 * @author: Hayk Martirosyan
 * @date: 2014.11.15
 */
#include <ros/ros.h>
#include <iostream>
#include <vector>
#include <Eigen/Dense>
#include <fstream>  
#include <string>
#include "kalman/kalman.h"
#include "kalman/Roshdl.h"



int main(int argc, char** argv)
{

   if (ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Debug)) 
  {
     ros::console::notifyLoggerLevelsChanged();
  }

  ROS_DEBUG("initializing");
  ros::init(argc, argv, "the_run_file");
  ros::NodeHandle nh;
  ros::NodeHandle nh_local("~");
  Roshdl handler_ros(nh, nh_local);
  ROS_DEBUG("initializing1");
  double frequency;
  nh_local.param<double>("frequency", frequency, 25);
  ROS_DEBUG("Frequency set to %0.1f Hz", frequency);
  ros::Rate rate(frequency);

  while (ros::ok())
  {
    ros::spinOnce();
    rate.sleep();
  }


    
   // int n = 2; // Number of states
   // int m = 1; // Number of measurements

  //double dt = 1.0/30; // Time step
/*
  Eigen::MatrixXd A(n, n); // System dynamics matrix
  Eigen::MatrixXd C(m, n); // Output matrix
  Eigen::MatrixXd Q(n, n); // Process noise covariance
  Eigen::MatrixXd R(m, m); // Measurement noise covariance
  Eigen::MatrixXd P(n, n);
  Eigen::MatrixXd P0(n, n);
  Eigen::MatrixXd x0(n, m); // Estimate error covariance

  // Discrete LTI projectile motion, measuring position only
  A << 1, .044, 0, 1;
  C << 1, 0;

  // Reasonable covariance matrices
  Q << .01, .01, .01, .01;
  R << .0009;
  P << 4, 0, 4, 0;
  
  std::cout << "A: \n" << A << std::endl;
  std::cout << "C: \n" << C << std::endl;
  std::cout << "Q: \n" << Q << std::endl;
  std::cout << "R: \n" << R << std::endl;
  std::cout << "P: \n" << P << std::endl;

  // Construct the filter
  KalmanFilter kf(A, C, Q, R, P);

  Eigen::MatrixXd y(m,m);
  
  double Ranges[720]={3.5406,3.5478,3.5209,3.5308,3.5527,3.5494,3.5606,3.5472,3.5376,3.5534,3.5503,3.5469,3.5532,3.5229,3.5433,3.5478,3.5617,3.5497,3.5505,3.5548,3.5665,3.5417,3.5421,3.5535,3.5690,3.5661,3.5666,3.5582,3.5559,3.5582,3.5886,3.5876,3.5867,3.5795,3.5871,3.5770,3.5989,3.5832,3.6071,3.5766,3.5968,3.5901,3.5969,3.5923,3.6023,3.6004,3.6335,3.6152,3.6142,3.6311,3.6279,3.6086,3.6174,3.6462,3.6350,3.6459,3.6504,3.6480,3.6529,3.6612,3.6902,3.6788,3.6773,3.6927,3.6831,3.6933,3.6985,3.7022,3.7070,3.7011,3.7140,3.7032,3.7245,3.7389,3.7168,3.7441,3.7407,3.7465,3.7483,3.7718,3.7818,3.7747,3.7991,3.7955,3.8088,3.7813,3.8121,3.8017,3.8292,3.8341,3.8202,3.8437,3.8445,3.8463,3.8453,3.8641,3.8823,3.8828,3.8947,3.9200,3.9148,3.9029,3.9354,3.9424,3.9376,3.9421,3.9625,3.9560,3.9856,3.9856,3.9873,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,100000,1.9760,1.9781,1.9481,1.8984,1.8790,1.8697,1.8278,1.8177,1.7854,1.7508,1.7470,1.7064,1.7039,1.6829,1.6504,1.6465,1.6181,1.6151,1.5902,1.5634,1.5386,1.5431,1.5228,1.4813,1.4869,1.4650,1.4658,1.4266,1.4270,1.4087,1.3876,1.3870,1.3761,1.3554,1.3448,1.3177,1.3326,1.3028,1.3034,1.2831,1.2759,1.2451,1.2529,1.2380,1.2176,1.2292,1.2138,1.1933,1.1883,1.1825,1.1688,1.1480,1.1310,1.1464,1.1390,1.1349,1.1350,1.1049,1.0990,1.0982,1.0979,1.0975,1.1031,1.1125,1.1016,1.1082,1.1250,1.1081,1.1233,1.1187,1.1191,1.1406,1.1295,1.1511,1.1372,1.1420,1.1464,1.1353,1.1460,1.1606,1.1562,1.1727,1.1611,1.1691,1.1887,1.1676,1.1817,1.2034,1.1975,1.2190,1.2028,1.2134,1.2135,1.2078,1.2131,1.2153,1.2389,1.2391,1.2410,1.2497,1.2511,1.2421,1.2457,1.2597,1.2618,1.2677,1.2749,1.2753,1.3001,1.2946,1.2992,1.3041,1.3132,1.3078,1.3155,1.3282,1.3295,1.3571,1.3440,1.3492,1.3554,1.3703,1.3833,1.3670,1.3600,1.3720,1.3888,1.3849,1.3952,1.4044,1.4165,1.4461,1.4403,1.4501,1.4635,1.4542,1.4685,1.4796,1.4716,1.5028,1.5078,1.5113,1.5167,1.5226,1.5196,1.5280,1.5578,1.5397,1.5817,1.5826,1.5870,1.6022,1.6160,1.6199,1.6143,1.6473,1.6441,1.6587,1.6684,1.6886,1.6956,1.6863,1.7063,1.7185,1.7453,1.7436,1.7524,1.7971,1.8088,1.7995,1.8192,2.5044,2.5108,2.4968,2.4805,2.4644,2.4677,2.4654,2.4607,2.4525,2.4430,2.4523,2.4294,2.4234,2.4292,2.4245,2.4252,2.4184,2.4165,2.3875,2.3929,2.3948,2.3951,2.3737,2.3570,2.3896,2.3548,2.3623,2.3594,2.3567,2.3393,2.3369,2.3243,2.3343,2.3308,2.3371,2.3356,2.3097,2.3021,2.3116,2.3134,2.2915,2.2895,2.2945,2.3023,2.2852,2.2851,2.2683,2.2785,2.2590,2.2822,2.2625,2.2759,2.2615,2.2493,2.2671,2.2551,2.2381,2.2467,2.2523,2.2493,2.2474,2.2400,2.2428,2.2246,2.2243,2.2343,2.2281,2.2442,2.2215,2.2119,2.2215,2.2117,2.2151,2.1965,2.2118,2.1902,2.2147,2.2008,2.1846,2.1987,2.2122,2.2018,2.1983,2.1825,2.1774,2.1959,2.1770,2.1839,2.1781,2.1829,2.1748,2.2083,2.1744,2.1789,2.1781,2.1868,2.1729,2.1658,2.1794,2.1708,2.1630,2.2030,2.1667,2.1597,2.1586,2.1673,2.1426,2.1522,2.1562,2.1728,2.1641,2.1659,2.1605,2.1770,2.1664,2.1628,2.1607,2.1628,2.1454,2.1622,2.1531,2.1842,2.1574};
  double chicomp;
  int np=0,ni=0;
  while(np<720)
  {
    if(Ranges[np]!=100000)
    {
        break;
    }
  np++;

  }

  ni=np;
  kf.update_if(np+1);
  while(np<=720){
  if(ni==np)
  {
  x0 << Ranges[np], 0;

  y << Ranges[np];

  kf.calcp(Ranges[np]);
  kf.init(x0);

  }
  else
  {
    y << Ranges[np];
    chicomp = kf.update_pre(y); 
  
    if(chicomp>=3.84)
    {
      kf.update_if(np);
      ni=np;
      np--;

      if(Ranges[ni]==100000){
        while(np<720){
          np++;
          if(Ranges[np]!=100000) break;
          
        }
      ni=np;
      kf.update_if(np+1);
      np--;


      }
      else kf.update_if(np);
    }

     else 
     {
      kf.update_else(y);
     }

  }

  np++;

  }
  kf.printkb();
*/

  return 0;
}

  


  
  
